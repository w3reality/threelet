#!/usr/bin/env node

// DEPRECATED: Use the wasm-mt crate instead

const path = require('path');
const fs = require('fs-extra');
const babel = require('@babel/core');

const __catFile = (src, dest) => {
    return new Promise((res, rej) => {
        try {
            const rs = fs.createReadStream(src);
            const ws = fs.createWriteStream(dest, {flags: 'a'});
            ws.on('close', () => {
                // console.log('catFile(): done:', src, dest);
                res();
            });
            rs.pipe(ws);
        } catch (err) {
            rej(err);
        }
    });
};


const createEs6InputFile = async (src, dest) => {
    const fixNodeStr = `
const isNodejs = typeof window === 'undefined' &&
typeof __non_webpack_require__ !== 'undefined'; // 'require' is not defined in case of WebWorker
if (isNodejs) {
// console.log('global:', global);
const util = __non_webpack_require__('util');
global.TextEncoder = util.TextEncoder;
global.TextDecoder = util.TextDecoder;
}
`;
    // __log('fixNodeStr:', fixNodeStr);

    // maybe use concat-stream in future - https://github.com/maxogden/concat-stream

    fs.writeFileSync(dest, '//-------- begin es6 block\n'); // create a new file
    fs.appendFileSync(dest, fixNodeStr);
    // __log('before: await catFile()');
    await __catFile(src, dest);
    // __log('after: await catFile()');
    fs.appendFileSync(dest, '//-------- end es6 block');
};

const createExportsFnString = (fnName, srcStr) => {
    return `
const ${fnName} = () => (() => {
const exports = {};
` + babel.transformSync(srcStr, {
    //==== `async/await` -> _regeneratorRuntime.xx() calls
    // presets: ['@babel/preset-env'],
    //==== keep `async/await` etc.(!!) based on `targets`
    // presets: [['@babel/preset-env', {targets: "last 1 chrome versions"}]],
    //==== **OK** use `fast-async` for compile-time transformation of async/await
    // https://stackoverflow.com/questions/52704820/disable-promise-transpilation-using-babel-preset-env
    // https://github.com/MatAtBread/fast-async#usage
    presets: [['@babel/preset-env', {exclude: ["babel-plugin-transform-async-to-generator", "babel-plugin-transform-regenerator"]}]],
    plugins: ['module:fast-async'],
    //==== this adds `require("...")` for regenerator stuff; needs post-processing with Webpack...
    // plugins: [
    //     // https://stackoverflow.com/questions/33527653/babel-6-regeneratorruntime-is-not-defined
    //     // ["transform-runtime", {"regenerator": true}], // babel-6's loader -- https://stackoverflow.com/a/36821986
    //     ["@babel/transform-runtime"], // babel-7's loader -- https://stackoverflow.com/a/53736090
    // ],
}).code + `
return exports; })();
`;
};

const genSnippetExportsJs = async (srcFile, outDir, outFile) => {
    const destEs6 = path.resolve(`${outDir}/__snippet.exports.es6.js`);
    await createEs6InputFile(srcFile, destEs6);
    const srcStr = fs.readFileSync(destEs6, 'utf8')
    fs.removeSync(destEs6);

    const pathOut = path.resolve(`${outDir}/${outFile}`);
    fs.writeFileSync(pathOut, ''); // create a new file
    fs.appendFileSync(pathOut,
        createExportsFnString('createSnippetExports', srcStr));
};

const genExportsJs = async (config, throwOnError) => {
    const { crateDir, crateNameUnderscored, outDir, optSnippetFile } = config;

    const src = `${crateDir}/pkg/${crateNameUnderscored}.js`;
    const destEs6 = path.resolve(`${outDir}/__exports.es6.js`);

    await createEs6InputFile(src, destEs6);

    const srcStr = fs.readFileSync(destEs6, 'utf8')
        .replace(/import \* as wasm.*/g, 'export const wasm = {};')
        .replace(/ from \'\.\/snippets\//g, ' from \'\.\/__snippets\/');
    // __log('srcStr:', srcStr);

    const fnameOut = `${crateNameUnderscored}.exports.js`;
    const pathOut = path.resolve(`${outDir}/${fnameOut}`);
    const fnName = 'createBgExports';

    fs.writeFileSync(pathOut, ''); // create a new file
    fs.appendFileSync(pathOut, `
const crateName = "${crateNameUnderscored}";
`);
    fs.appendFileSync(pathOut, createExportsFnString(fnName, srcStr));
    fs.appendFileSync(pathOut, `
// export { crateName, ${fnName} };
`);

    console.log(`transformed pkg/${crateNameUnderscored}.js -> ${fnameOut}`)

    // clean up
    // nop when the file/dir does not exist - https://github.com/jprichardson/node-fs-extra/blob/master/docs/remove-sync.md
    fs.removeSync(destEs6);

    // experimental: snippet file processing
    // console.log('optSnippetFile:', optSnippetFile);
    if (optSnippetFile) {
        const outfile = 'snippet-test1.exports.js';
        console.log('begin: process a snippet:', optSnippetFile);
        await genSnippetExportsJs(optSnippetFile, '.', outfile);
        console.log('done, outfile:', outfile);
    }
};



const yargs = require('yargs');
const argv = yargs
    .usage('usage: $0 <crate-dir> <crate-name> <out-dir> [<snippet-file>]')
    .example('$0 ./fern fern .')
    .demandCommand(3)
    .argv;
// console.log(argv);

genExportsJs({
    crateDir: argv._[0],
    crateNameUnderscored: argv._[1],
    outDir: argv._[2],
    optSnippetFile: argv._[3], // TODO - only one file supported so far!!!!
});
